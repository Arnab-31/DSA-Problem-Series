https://www.geeksforgeeks.org/move-negative-numbers-beginning-positive-end-constant-extra-space/

Approach - 
Check If the left and right pointer elements are negative then simply increment the left pointer.
Otherwise, if the left element is positive and the right element is negative then simply swap the elements, and simultaneously increment and decrement the left and right pointers.
Else if the left element is positive and the right element is also positive then simply decrement the right pointer.
Repeat the above 3 steps until the left pointer â‰¤ right pointer.

TC - O(n)
SC - O(1)

// C# program of the above
// approach
using System.IO;
using System;
class GFG
{
	// Function to shift all the
	// negative elements on left side
	static void shiftall(int[] arr, int left,int right)
	{
	
		// Loop to iterate over the
		// array from left to the right
		while (left <= right)
		{
		
			// Condition to check if the left
			// and the right elements are
			// negative
			if (arr[left] < 0 && arr[right] < 0)
				left++;

			// Condition to check if the left
			// pointer element is positive and
			// the right pointer element is negative
			else if (arr[left] > 0 && arr[right] < 0)
			{
				int temp = arr[left];
				arr[left] = arr[right];
				arr[right] = temp;
				left++;
				right--;
			}

			// Condition to check if both the
			// elements are positive
			else if (arr[left] > 0 && arr[right] > 0)
				right--;
			else
			{
				left++;
				right--;
			}
		}
	}

	// Function to print the array
	static void display(int[] arr, int right)
	{
	
		// Loop to iterate over the element
		// of the given array
		for(int i = 0; i <= right; ++i)
		{
			Console.Write(arr[i] + " ");
			
		}
		Console.WriteLine();
	}
	
	// Drive code				
	static void Main()
	{
		int[] arr = {-12, 11, -13, -5, 6, -7, 5, -3, 11};
		int arr_size = arr.Length;
		shiftall(arr, 0, arr_size - 1);
		display(arr, arr_size - 1);
	}
}

// This code is contributed by avanitrachhadiya2155

