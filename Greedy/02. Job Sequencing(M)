Question: https://practice.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1#

Solution: 

#include <bits/stdc++.h>

using namespace std;

struct Job {
    int id,deadline,profit;
};
bool sortingOrder(Job a, Job b){   //sorting condition
    return a.profit>b.profit;
}

int main()
{
    int n;
    cin>>n;
    Job arr[100];

    for(int i=0;i<n;i++){
        cin>>arr[i].deadline;
        cin>>arr[i].profit;
        arr[i].id=i+1;
    }
    sort(arr,arr+n,sortingOrder);

    int end=arr[0].deadline;            //finding the maximum deadline 
    for(int i=1;i<n;i++){
        if(arr[i].deadline > end){
            end = arr[i].deadline;
        }
    }

    int plan[100]={0};                  //0 means all slots are empty currently
    vector <int> ans;
    for(int i=0;i<n;i++){
        int d = arr[i].deadline;
        while(plan[d]!=0 && d>=1){      //finding a free slot starting from the last slot possible
            d--;
        }
        if(d!=0){                       //if free slot found id of job pushed in final result
            plan[d]=1;
            ans.push_back(arr[i].id);
        }
    }

    for(int i=0;i<ans.size();i++){
        cout<<ans[i]<<" ";
    }
    return 0;
}
