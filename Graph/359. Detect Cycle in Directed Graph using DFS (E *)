Question: https://www.geeksforgeeks.org/detect-cycle-in-a-graph/


Solution: 
TC - O(V+E)
SC - O(V)


#include <bits/stdc++.h>

using namespace std;


class Graph
{
    list <int> *adj;
    int size;

    public:
    Graph(int n)
    {
        adj = new list<int> [n];
        size=n;
    }

    void addEdge(int a,int b)
    {
        adj[a].push_back(b);
        //adj[b].push_back(a);     //uncomment this line for undirected Graoh
    }

    void BFS(int x)
    {
        int visited[size] = {0};
        queue <int> q;

        cout<<x<<" ";
        visited[x]=1;
        q.push(x);

       while(!q.empty())
       {
           int a = q.front();
           q.pop();
           for(auto j: adj[a])
           {
               if(visited[j]==0)
               {
                   cout<<j<<" ";
                   visited[j]=1;
                   q.push(j);
               }
           }
       }
    }

    void DFS (int x)
    {
        static int visited[5] = {0};

        cout<<x<<" ";
        visited[x]=1;

        for(auto j: adj[x])
        {
            if(visited[j]==0)
                DFS(j);
        }
    }


    bool isCyclicUtil(int v, bool visited[], bool *recStack)
    {
        if(visited[v] == false)
        {
            // Mark the current node as visited and part of recursion stack
            visited[v] = true;
            recStack[v] = true;

            // Recur for all the vertices adjacent to this vertex
            list<int>::iterator i;
            for(i = adj[v].begin(); i != adj[v].end(); ++i)
            {
                if ( !visited[*i] && isCyclicUtil(*i, visited, recStack) )
                    return true;
                else if (recStack[*i])
                    return true;
            }

        }
        recStack[v] = false; // remove the vertex from recursion stack
        return false;
    }

    bool isCyclic ()
    {
        bool *visited = new bool[size];
        bool *recStack = new bool[size];
        for(int i = 0; i < size; i++)
        {
            visited[i] = false;
            recStack[i] = false;
        }

        // Call the recursive helper function to detect cycle in different
        // DFS trees
        for(int i = 0; i < size; i++)
        {
            if (isCyclicUtil(i, visited, recStack))
            {
              return true;
            }
        }

        return false;
    }


    void displayGraph()
    {
        for(int i=0;i<size;i++)
        {
            cout<<i;

            for(auto i: adj[i])
                cout<<" --> "<<i;

            cout<<endl;
        }
    }


};


int main()
{
    int N = 5;
    Graph G(N);
    G.addEdge(1, 0);
    G.addEdge(0, 2);
    G.addEdge(3, 2);
    G.addEdge(3, 4);
    G.addEdge(4, 2);
    G.addEdge(1, 3);
    G.addEdge(4, 1);


    G.displayGraph();
    //G.BFS(1);    //1 is the index from where DFS starts
    //G.DFS(3);

    if(G.isCyclic())
		cout << "Graph contains cycle";
	else
		cout << "Graph doesn't contain cycle";
    return 0;
}
